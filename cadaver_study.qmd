---
title: "Medartis Wrist Plates"
subtitle: "Experiment 2 - bending and shear matched"
date: 2024-07-23
format: 
  html: default
  pdf: default
  docx: default
---

## setup

Load any needed libraries and define some constants.

```{r}
#| label: setup
#| warning: false
#| message: false

library(dplyr) # for manipulating dataframes
library(ggplot2) # for plotting

# If you don't have bluer install it with 
# install.packages("devtools")
# devtools::install_github(repo = "yadbor/bluer")
library(bluer) # routines for analysing mechanical test data

cleaned_file <- "cadaver_all_results.csv"
cycles_file <- "cadaver_cycles.csv"

```

## read the data files

Use the code below to read all of the .csv files output from VIC-3D.
```{r}
#| label: read_raw_files

data_root <- here::here("data-raw", "cadaver_csv_files")

raw_files = list.files(path = data_root,
                       pattern = "csv$",
                       recursive = TRUE,
                       full.names = TRUE,
                       ignore.case = TRUE
                       )
raw_files <- raw_files |>
  stringr::str_subset(pattern = "(?i)Marker_Data") # Case insensitive match needed

# Some tests were analysed without removing rigid motion of the wrist marker,
# to check that motion reduction was working as anticipated.
# Remove these from the list of files to analyse.

raw_files <- raw_files |>
  stringr::str_subset(pattern = "MOTION", negate = TRUE)

# Name the vector with the filename, which bind_rows will turn into a column
names(raw_files) <- basename(raw_files)

# Map the function read_csv() across all elements in raw_files, then bind the resulting dataframes
# rowwise into a combined dataframe, putting the names from raw_files into a column "filename".
all_results <- raw_files |>
  purrr::map(\(f) readr::read_csv(file = f, show_col_types = FALSE)) |>
  bind_rows(.id = "filename") |>
  # clean up and simplify names
  rename(frame = "File Number", time = "Time_1") |>
  rename_with(~ stringr::str_remove(.x, "\\s*\\[.+\\]") |> stringr::str_to_lower()) |>
  select(-"time_0") |> # Don;t need two time columns
  # fix the spelling of parts of the filename
  # First fix a known typo
  mutate(filename = stringr::str_replace(filename, "(?i)poximal", "proximal")) |>
  # Then make the marker labels all lower case
  mutate(filename = stringr::str_replace(filename, "(?i)distal", "distal")) |>
  mutate(filename = stringr::str_replace(filename, "(?i)proximal", "proximal"))
```

```{r}
#| label: parse_filenames

all_results <- all_results |>
  tidyr::separate_wider_regex(cols = filename,
                              patterns = c(id = "^[^_]+", "_", 
                                           arm = "[^_]+", "_(?i)plate\\d?", 
                                           plate = "[L|S]", "_",
                                           marker = "(?i)distal|proximal", ".*"),
                                cols_remove = FALSE,
                                #too_few = "debug"
    ) 
```

Check that the filenames have parsed to something sensible
```{r}
#| label: check_parsed

all_results |> select(id:marker) |> purrr::map( \(c) unique(c))
```
Can then write the cleaned results out.

```{r}
#| label: write_cleaned_data
readr::write_csv(all_results, file = here::here("data", cleaned_file))
```

If using the precleaned results, load them here
```{r}
#| label: read_cleaned_data
all_results <- readr::read_csv(file = here::here("data", cleaned_file), 
                               show_col_types = FALSE)

```

## analyse cycles

Each test has multiple load-unload cycles. 
Data are recorded on the 9^th^ and 10^th^ cycles, and this is repeated 
every 10 cycles up to a total of 60 cycles.
We are interested in the loading part of each cycle.

Divide test into cycles by finding peaks and troughs, which are defined as local
maxima and minima.
The loading phase is the one going towards a peak, and the unloading phase is
towards a trough.

The `bluer` package has routines for finding peaks and labelling cycles 
and phases.

As these tests are all in compression, both the load and position 
are negative.
Invert them both so that graphs read better for most people.

```{r}
#| label: label_cycles

cycles <- all_results |> 
    # drop unused columns
  # select(filename, all_of(data_cols)) |>
  mutate(position = -1.0 * position, load = -1.0 * load) |> # Invert these axes
  mutate(across(id:marker, factor)) |> # Convert all id columns to factors
  group_by(across(where(is.factor))) |> # group each test
  mutate(as_tibble(bluer::label_cycles(position))) |> # and label the cycles
  mutate(uid = paste0(id, arm, plate, marker, cycle)) # uniquely identify each cycle
```


Save the labelled data.
```{r}
#| label: write_cleaned_data
readr::write_csv(cycles, file = here::here("data", cycles_file))
```

If the data files have already been cleaned up and combined, 
just read the processed data from `cadaver_cycles.csv`.

```{r}
#| label: read_data
#| eval: false # change this to read the file
cycles <- readr::read_csv(file = here::here("data", cycles_file),
                               show_col_types = FALSE)
# Remake thr grouping information
cycles <- cycles |>
  mutate(across(id:marker, factor)) |> # Convert all id columns to factors
  group_by(across(where(is.factor)))
```

Check that the markers are correctly labelled.
The test geometry always puts the proximal marker to the right, 
so the proximal X coordinate will be greater than the distal X coordinate.

```{r}
#| message: FALSE
cycles |> 
  filter(cycle == 1) |> # X, Y, Z are determined by the first frame
  summarise(x = first(x)) |> # just the first row of each
  tidyr::pivot_wider(names_from = marker, values_from = x) |> 
  mutate(proximal_right = proximal > distal)
```


```{r}
#| label: check_plots
# Check what we have done

cycles |> 
  filter(seg == "load") |>
  ggplot() + 
  aes(x = time, y = position, colour = marker, group = id) +
  geom_point() +
  facet_grid(plate + marker ~ id, scales = "free") +
  labs(title = "everything, everywhere, all at once")
```
There are no results for the `MSD601` short plate test, 
and only 3 cycles in the long plate test, so drop `MSD601`.

`MSD664` short plate has an extra cycle, which looks like the load to failure 
test was accidentally included in the analysis.
Drop the extra cycle, so every test has 12 cycles (6 groups of 2 cycles).

```{r}
#| label: drop_bad_tests

cycles <- cycles |>
  filter(id != "MSD601") |>
  filter(cycle < 13)
```


Plot just the loading portion of each cycle, as load vs position.
```{r}
#| label: plot_load_position

loading <- cycles |> 
    filter(seg == "load")

loading |>
    ggplot() + 
    aes(x = time, y = position, colour = factor(cycle), group = uid) +
    geom_line() +
    facet_grid(plate + marker ~ id, scales = "free") +
    guides(colour=FALSE) +
    labs(title = "position vs time - by plate, marker and id")
```
The short plate test for MSD664 appears to have run twice as fast as the 
long plate test, which needs more analysis.

The Instron was programmed to move downwards at a constant speed, 
reversing when the measured load reached 70N, 
then moving back up until the load dropped to 7N.
This was repeated for every cycle.

Speed is `position / time`, which is the slope of the position vs time curve.

```{r}
#| label: check_MSD664
loading |> 
  filter(str_detect(filename, "(?i)664" ), 
         marker == "distal", time < 800) |> 
  mutate(dt = time - first(time), ds = position - first(position)) |> 
  ggplot() + 
  aes(y=ds, x = dt, colour = cycle, group = uid) + 
  geom_point() + 
  geom_line() + 
  facet_grid(filename~.)
```
Check that all tests did in fact have the same speed.
```{r}
#| label: check_speeds
#| message: false

# Calculate the slope of position vs time

# General version
# speeds <- loading |>
#   group_by(id, arm, plate, marker, cycle) |>
#   summarise(
#     model = list(
#       lm(position ~ time, data = pick(everything()))
#     )
#   ) |> 
#   mutate(
#     across(ends_with("model"), ~ purrr::map(.x, broom::tidy), .names = "{.col}_tidy")
#   ) |>
#   tidyr::unnest(ends_with("tidy"), names_sep = "_") |>
#   filter(if_any(ends_with("term"), \(c) c != "(Intercept)")) |>
#   select(ends_with("estimate")) |>
#   rename_with(~ stringr::str_remove(.x, "_model_tidy_estimate"))

# Fit a straight line to position ~ time for each test, then extract the slopes
speeds <- loading |>
  group_by(id, arm, plate, marker, cycle) |>
  summarise(
        model = list(lm(position ~ time, data = pick(everything())))
    ) |> 
  mutate(params = purrr::map(model, broom::tidy)) |> 
  tidyr::unnest(params) |> 
  filter(term != "(Intercept)") |> 
  select(estimate)

# Summarise the speeds
#numbers <- summary(speeds$estimate)
cat("The measured test speeds across ", nrow(speeds), "cycles varied thus:\n")
print(numbers)

percent_spread <- 100 * (last(numbers) - first(numbers)) / numbers["Mean"] |> unname()
cat("\nThis is a total variation of about", round(percent_spread, 1), "%")
```

This is a total variation of about `r round(percent_spread, 1)`, 
so can accept that the speed was relatively constant.

WH\hat about the shape of the load ~ position curve?
```{r}
#| label: MSD664_load_poition

loading |> 
    filter(str_detect(filename, "(?i)664" ), 
           marker == "distal", time < 800) |> 
    mutate(dt = time - first(time), ds = position - first(position)) |> 
    ggplot() + 
    aes(x=ds, y = load, colour = ordered(cycle), group = uid) + 
    geom_hline(yintercept = c(7, 70), linetype = "dashed", colour = "darkred") +
    geom_point() + 
    geom_line() + 
    facet_grid(plate ~ .) + 
    labs(colour = "cycle", title = "load vs position for MSD664")
    
```
It is clear that the short plate specimen is not only much stiffer than the
long plate specimen, but also quite non-linear.
This is more pronounced for this specimen than for other specimens,
although some others do show similar non-linearity, 
both for the long and short plate specimens.
```{r}
loading |> 
    filter(marker == "distal", time < 800) |> 
    mutate(dt = time - first(time), ds = position - first(position)) |> 
    ggplot() + 
    aes(x=ds, y = load, colour = ordered(cycle), group = uid) + 
    geom_hline(yintercept = c(7, 70), linetype = "dashed") +
    geom_point() + 
    geom_line() + 
    facet_grid(plate~id) + labs(colour = "cycle")
```

Note particularly MSD575 and MSD666 long and MSD649 both short and long.



It is also obvious that there is a big time gap on some cycles, visible as a 
horizonatal or near horizontal line.
Look more closely at one test to see what is happening:
```{r}
#| label: single_test

loading |>
  filter(id == "MSD575") |>
  ggplot() + 
    aes(x = time, y = position, colour = factor(cycle), group = uid) +
    geom_line() + geom_point() +
    facet_grid(plate + marker ~ id, scales = "free") +
    guides(colour=FALSE) +
    labs(title = "position vs time - single id")
```
For each pair of load cycles after the first one there are a few points, 
then a long gap before the rest of the test.
This usually indicates that the cycle seperation code has included some of the
previous cycle, which can happen when the lower "peak" is wide and a bit noisy.

Fix that by finding large time gaps in the data and dropping points before the gap.

```{r}
#| label: drop_extra_points_start
# loading was already grouped by id, arm, plate, marker
# Calculate the time gap between points, 
# find gaps that are bigger than 2  the mean gap (to allow for a little jitter)
# get row of the first gap, or 1 if which() returns an empty vector (none found)
# and keep only points after that row to the end of the cycle
loading <- loading |> 
  group_by(id, arm, plate, marker, cycle) |>
  mutate(gap = time - lag(time), 
         big_gap = gap > 2 * mean(gap, na.rm = TRUE), # gap 0 is NA as no prior
         gap_pos = max(1, which(big_gap))) |>
  slice(max(gap_pos):n()) |> # could also use first(gap_pos), to get single value
  select(-c(gap, big_gap, gap_pos)) # Clean up the temporary columns
```

Plot again to check if it has worked

```{r}
#| label: test_cleaned

loading |>
#  filter(u < 0) |>
    ggplot() + 
    aes(x = time, y = u, colour = factor(cycle), group = uid) +
    geom_line() +
    facet_grid(plate + marker ~ id, scales = "free") +
    guides(colour=FALSE) +
    labs(title = "position vs time - by plate, marker and id")
```

## clean the motion data

There is some jiggle at the start of some cycles, 
where the construct does not always return to the same position.
Deal with that by creating incremental displacements for each cycle.

```{r}
loading <- loading |>
  mutate(across(c(u,v,w), \(m) m - first(m), .names = "inc_{.col}"))
```

Calculate total motion for each marker.
The `u` displacement is down (-ve), as is the `v` displacement generally.
The total absolute displacement will always be positive:
$$ motion = \sqrt{u^2 + v^2 + w^2} $$

```{r}
loading <- loading |> 
  mutate(motion = sqrt(u^2 + v^2 + w^2)) 

loading |>
  ggplot() + 
  aes(x=load, y = motion, colour = marker, group = uid) + 
  geom_line() + 
  geom_smooth(method="lm", se = FALSE, colour = "black", linetype = 2, linewidth = 0.5) +
  facet_grid(id+plate~cycle) +
  labs(title = "motion vs load per cycle")
```

## analysis

To get the stiffness of each test we fit a linear model by least squares.

We can analyse total motion at the end of the "metacarpal" (`position`), 
or the total motion at the fusion site (`motion`).
The latter is what is more clinically relevant, and by measuring at
the fusion site we remove the effect of differing bending in the 3D printed
bone analogues.


```{r}
#| label: linear_model_fitting
# fit a linear model to each cycle
loading_models <- loading |>
  group_by(id, arm, plate, marker, cycle) |>
  summarise(
    position_model = list(
      lm(load ~ position, data = pick(everything()))
    ),
    motion_model = list(
      lm(load ~ motion, data = pick(everything()))
    )
  )

# Extract the slope components (estimate) of the models
stiffness <- loading_models |>
  group_by(id, arm, plate, marker, cycle) |>
  mutate(
    across(ends_with("model"), ~ purrr::map(.x, broom::tidy), .names = "{.col}_tidy")
    ) |>
  tidyr::unnest(ends_with("tidy"), names_sep = "_") |>
  filter(if_any(ends_with("term"), \(c) c != "(Intercept)")) |>
  select(ends_with("estimate")) |>
  rename_with(~ stringr::str_remove(.x, "_model_tidy_estimate"))
```

## save the calculated stiffness results

Write out the calculated stifness results.
These can be read to apply different analysis, without re-calculating from the raw data.

```{r}
#| label: save_stiffness
readr::write_csv(stiffness, file = here::here("data", "cadaver_stiffness.csv"))
```


```{r}
#| label: plot_liner_model_stiffness
# Plot the stiffness per cycle as a check
stiffness |> 
  ggplot() +
  aes(x= cycle, y = motion, colour = plate) +
  geom_point() +
  facet_grid(marker ~ id) + 
  labs(title = "stiffness per cycle")

stiffness |> 
  ggplot() +
  aes(x= plate, y = motion, colour = plate) +
  geom_boxplot() +
  facet_grid(marker ~ id) + 
  labs(title = "stiffness", y = "N/mm marker motion")

stiffness |> 
  ggplot() +
  aes(x= plate, y = position, colour = plate) +
  geom_boxplot() +
  facet_grid(marker ~ id) + 
  labs(title = "stiffness", y = "N/mm marker motion")
```

## check for effect of cycling

Every test was made up of 60 cycles, with two cycles recorded every 10 - so
cycles 9, 10, 19, 20, 29, 30, 39, 40, 49, 50, 50, 60.

To test if repeated cycling is having an effect use a repeated 
measures ANOVA, as the cycles are repeated on the same subject for each test.

```{r}
#| label: repeated_measures_anova

# For repeats of the first plate
stiffness |> 
  ungroup() |> 
  #select(-arm) |>
  nest_by(id, plate,marker) |>
  mutate(model = list(aov(motion ~ cycle, data = data)),
         summary = list(broom::tidy(model))
  ) |>
  tidyr::unnest(summary) |>
  select(-data, -model) |>
  filter(!is.na(p.value))

# Across plates
stiffness |> 
  ungroup() |> 
  nest_by(plate, marker) |> 
  mutate(model = list(aov(motion ~ cycle + Error(factor(id)), data = data)),
         summary = list(broom::tidy(model))
         ) |> 
  tidyr::unnest(summary) |> 
  select(-data, -model) |>
  filter(!is.na(p.value))

```
Only one result (proximal marker for long plates) was significant.
It is not unreasonable to can conclude that the stiffness is generally not 
changed by multiple cycles.
This means they can be averaged to reduce the variation between cycles.

Use the averaged stiffnesses in an ANOVA to look for differences due to plate type.
```{r}
#| label: compare_plates
#| warning: false
#| message: false

model <- stiffness |>
  summarise(stiffness = mean(motion), .groups = "keep") |>
  ungroup() |>
  aov(stiffness ~ plate+marker, data = _)

summary(model)
```

This shows a significant difference between the two plate designs.
The box plot shows this graphically.

```{r}
#| label: compare_plate_types
#| message: false
#| warning: false

# Compare average stiffness between plates

# This is for insertion into Matt's presentation, so want to use the font 
# Calibri, like the rest of the slides. These need to be installed previously.

extrafont::loadfonts() # makes other fonts available to R

plot_box <- loading |>
    mutate(stiffness = mean(motion)) |>
    ggplot() + 
    aes(y = motion, x = plate) +
    geom_boxplot() +
    theme_bw(base_size = 14, base_family = "Calibri") +
    facet_grid(.~marker)
    #labs(title = "plate stiffness")
print(plot_box)

ggsave(filename = here::here("data", "stiffness_between_plates.png"), 
       plot = plot_box, 
       width = 21, height = 12, units = "cm")
```

