---
title: "Medartis Wrist Plates"
subtitle: "Experiment 2 - bending and shear matched"
date: 2024-07-23
format: 
  html: default
  pdf: default
  docx: default
---

## setup

Load any needed libraries and define some constants.

```{r}
#| label: setup
#| warning: false
#| message: false

library(dplyr) # for manipulating dataframes
library(ggplot2) # for plotting

#library(segmented) # for segmented fits

# If you don't have bluer install it with 
# install.packages("devtools")
# devtools::install_github(repo = "yadbor/bluer")
library(bluer) # routines for analysing mechanical test data

cleaned_file <- "cadaver_all_results.csv"
cycles_file <- "cadaver_cycles.csv"

```

## read the data files

Use the code below to read all of the .csv files output from VIC-3D.
```{r}
#| label: read_raw_files

data_root <- here::here("data-raw", "cadaver_csv_files")

raw_files = list.files(path = data_root,
                       pattern = "csv$",
                       recursive = TRUE,
                       full.names = TRUE,
                       ignore.case = TRUE
                       )
raw_files <- raw_files |>
  stringr::str_subset(pattern = "(?i)Marker_Data") # Case insensitive match needed

# Some tests were analysed without removing rigid motion of the radius marker,
# to check that motion reduction was working as anticipated.
# Remove these from the list of files to analyse.

raw_files <- raw_files |>
  stringr::str_subset(pattern = "(?i)MOTION|Radius", negate = TRUE)

# Name the vector with the filename, which bind_rows will turn into a column
names(raw_files) <- basename(raw_files)

# Map the function read_csv() across all elements in raw_files, then bind the resulting dataframes
# rowwise into a combined dataframe, putting the names from raw_files into a column "filename".
all_results <- raw_files |>
  purrr::map(\(f) readr::read_csv(file = f, show_col_types = FALSE)) |>
  bind_rows(.id = "filename") |>
  # clean up and simplify names
  rename(frame = "File Number", time = "Time_1") |>
  rename_with(~ stringr::str_remove(.x, "\\s*\\[.+\\]") |> stringr::str_to_lower()) |>
  dplyr::select(-"time_0") |> # Don;t need two time columns
  # fix the spelling of parts of the filename
  # First fix a known typo
  mutate(filename = stringr::str_replace(filename, "(?i)poximal", "proximal")) |>
  # Then make the marker labels all lower case
  mutate(filename = stringr::str_replace(filename, "(?i)distal", "distal")) |>
  mutate(filename = stringr::str_replace(filename, "(?i)proximal", "proximal"))
```

```{r}
#| label: parse_filenames

all_results <- all_results |>
  tidyr::separate_wider_regex(cols = filename,
                              patterns = c(id = "^[^_]+", "_", 
                                           arm = "[^_]+", "_(?i)plate\\d?", 
                                           plate = "[L|S]", "_",
                                           marker = "(?i)distal|proximal", ".*"),
                                cols_remove = FALSE,
                                #too_few = "debug"
    ) 
```

Check that the filenames have parsed to something sensible
```{r}
#| label: check_parsed

all_results |> dplyr::select(id:marker) |> purrr::map( \(c) unique(c))
```
Can then write the cleaned results out.

```{r}
#| label: write_cleaned_data
readr::write_csv(all_results, file = here::here("data", cleaned_file))
```

If using the precleaned results, load them here
```{r}
#| label: read_cleaned_data
all_results <- readr::read_csv(file = here::here("data", cleaned_file), 
                               show_col_types = FALSE)

```

## analyse cycles

Each test has multiple load-unload cycles. 
Data are recorded on the 9^th^ and 10^th^ cycles, and this is repeated 
every 10 cycles up to a total of 60 cycles.
We are interested in the loading part of each cycle.

Divide test into cycles by finding peaks and troughs, which are defined as local
maxima and minima.
The loading phase is the one going towards a peak, and the unloading phase is
towards a trough.

The `bluer` package has routines for finding peaks and labelling cycles 
and phases.

As these tests are all in compression, both the load and position 
are negative.
Invert them both so that graphs read better for most people.

```{r}
#| label: label_cycles

cycles <- all_results |> 
    # drop unused columns
  # dplyr::select(filename, all_of(data_cols)) |>
  mutate(position = -1.0 * position, load = -1.0 * load) |> # Invert these axes
  mutate(across(id:marker, factor)) |> # Convert all id columns to factors
  group_by(across(where(is.factor))) |> # group each test
  mutate(as_tibble(bluer::label_cycles(position))) |> # and label the cycles
  mutate(uid = paste0(id, arm, plate, marker, cycle)) # uniquely identify each cycle
```

The recorded data do not align exactly with each cycle, 
with some points missing at the start of the first cycle of each pair 
and some extra points at the end of the second cycle, 
which are in fact the start of the third cycle.
These errors are probably due to a delay in triggering the VIC-3D system to
turn on and off.
The extra points add a turning point, 
which `bluer` will incorrectly interpret as the start (or end) of a cycle.

Plotting just the first test shows this problem, 
but it is present to a greater or lesser extent in all the tests.

```{r}
cycles |> 
  ungroup() |> 
  filter(filename == first(filename)) |> 
  tidyr::pivot_longer(cols = c(position, load)) |> 
  ggplot() + 
    aes(x=time, y = value) + 
    geom_point() + 
    geom_line() + 
    facet_grid(name~., scales="free_y")
```

Fix this by looking for the large time gap between pairs of cycle recordings and
deleting all points in a cycle that are before that gap.

```{r}
#| label: show_extra_points_start
cycles |> 
    group_by(id, arm, plate, marker, cycle) |>
    mutate(gap = time - lag(time), 
           big_gap = gap > 2 * mean(gap, na.rm = TRUE), # gap 0 is NA as no prior
           gap_pos = max(1, which(big_gap))) |>
    distinct(gap_pos) |> 
  tidyr::pivot_wider(values_from = gap_pos, names_from = cycle) |> 
  print(n=Inf)
```
There are not many points from the previous cycle in most tests, 
except for `MSD664` cycle 12.

This test also had the load to failure test capruted in the same file, 
resulting in cycle 13, which should be discarded.

```{r}
#| label: drop_extra_points_start
# loading was already grouped by id, arm, plate, marker
# Calculate the time gap between points, 
# find gaps that are bigger than 2  the mean gap (to allow for a little jitter)
# get row of the first gap, or 1 if which() returns an empty vector (none found)
# and keep only points after that row to the end of the cycle
cycles <- cycles |> 
  group_by(id, arm, plate, marker, cycle) |>
  mutate(gap = time - lag(time), 
         big_gap = gap > 2 * mean(gap, na.rm = TRUE), # gap 0 is NA as no prior
         gap_pos = max(1, which(big_gap))) |>
  slice(max(gap_pos):n()) |> # could also use first(gap_pos), to get single value
  dplyr::select(-c(gap, big_gap, gap_pos)) |> # Clean up the temporary columns
  filter(cycle < 13) # drop the load to failure portion
```

Save the labelled data.
```{r}
#| label: write_cleaned_data
readr::write_csv(cycles, file = here::here("data", cycles_file))
```

If the data files have already been cleaned up and combined, 
the preceeding code can be skipped and the processed data just 
read from `cadaver_cycles.csv` (below).

```{r}
#| label: read_data
#| eval: false # change this to read the file
cycles <- readr::read_csv(file = here::here("data", cycles_file),
                               show_col_types = FALSE)
# Remake thr grouping information
cycles <- cycles |>
  mutate(across(id:marker, factor)) |> # Convert all id columns to factors
  group_by(across(where(is.factor)), cycle)
```

## check data integrity

Check that the markers are correctly labelled.
The test geometry always puts the proximal marker to the right, 
so the proximal X coordinate will be greater than the distal X coordinate.

```{r}
#| message: FALSE
cycles |> 
  filter(cycle == 1) |> # X, Y, Z are determined by the first frame
  summarise(x = first(x)) |> # just the first row of each
  tidyr::pivot_wider(names_from = marker, values_from = x) |> 
  mutate(proximal_right = proximal > distal)
```

Plot all of the loading segments to visually check they look sensible.
This will be easier to interpret if if all of the cycles are aligned to start 
at time = 0.

```{r}
#| label: check_loading_shapes
#| warning: false

# As this is the applied load, it will be the same for either marker, so pick one.
loading |> 
    filter(marker == 'distal') |> 
    mutate(dt = time - first(time)) |> 
    ggplot() + 
      aes(y=load, x = dt, colour = ordered(cycle), group = uid) + 
      #scale_color_brewer(palette = "Set1") +
      geom_point() + 
      geom_hline(yintercept = c(7, 70), linetype = "dashed", colour = "darkred") +
      geom_line(linewidth = 0.5) + 
      facet_grid(id~plate) +
      labs(title = "load x time", colour = "cycle")

```

The peak load is quite uniform for each cycle, 
but the data do not always show a return to the same mimimum load.

Some of this will be the error in recording the start of each cycle.
This missing data has no effect on the stiffness calculations.

## missing data

There are no results for the `MSD601` short plate test, as the test failed, 
and only 3 cycles in the long plate test, so drop `MSD601`.

```{r}
#| label: drop_bad_tests

loading <- loading |>
  filter(id != "MSD601")
```

## check test speed

The short plate test for MSD664 appears to have run twice as fast as the 
long plate test, which needs more analysis.

The Instron was programmed to move at a constant speed, 
reversing when the measured load reached 70N, 
then moving back up until the load dropped to 7N.
This was repeated for every cycle.

Speed is `position / time`, which is the slope of the position vs time curve.
Plot the relative position and time for each cycle, to make the trends easier to see.

```{r}
#| label: check_MSD664
loading |> 
  filter(stringr::str_detect(filename, "(?i)664" ), 
         marker == "distal", time < 800) |> 
  mutate(dt = time - first(time), ds = position - first(position)) |> 
  ggplot() + 
  aes(y=ds, x = dt, colour = cycle, group = uid) + 
  geom_point() + 
  geom_line() + 
  facet_grid(filename~.)
```

Check that all tests did in fact have the same speed.

```{r}
#| label: check_speeds
#| message: false

# Calculate the slope of position vs time

# General version
# speeds <- loading |>
#   group_by(id, arm, plate, marker, cycle) |>
#   summarise(
#     model = list(
#       lm(position ~ time, data = pick(everything()))
#     )
#   ) |> 
#   mutate(
#     across(ends_with("model"), ~ purrr::map(.x, broom::tidy), .names = "{.col}_tidy")
#   ) |>
#   tidyr::unnest(ends_with("tidy"), names_sep = "_") |>
#   filter(if_any(ends_with("term"), \(c) c != "(Intercept)")) |>
#   dplyr::select(ends_with("estimate")) |>
#   rename_with(~ stringr::str_remove(.x, "_model_tidy_estimate"))

# Fit a straight line to position ~ time for each test, then extract the slopes
speeds <- loading |>
  group_by(id, arm, plate, marker, cycle) |>
  summarise(
        model = list(lm(position ~ time, data = pick(everything())))
    ) |> 
  mutate(params = purrr::map(model, broom::tidy)) |> 
  tidyr::unnest(params) |> 
  filter(term != "(Intercept)") |> 
  dplyr::select(estimate)

# Summarise the speeds
#numbers <- summary(speeds$estimate)
cat("The measured test speeds across ", nrow(speeds), "cycles varied thus:\n")
print(numbers)

percent_spread <- 100 * (last(numbers) - first(numbers)) / numbers["Mean"] |> unname()
cat("\nThis is a total variation of about", round(percent_spread, 1), "%")
```

This is a total variation of about `r round(percent_spread, 1)`, 
which is not very much, conidering the variation in recording as these data come
from the VIC-3D, not directly from the Instron.

What about the shape of the load ~ position curve?
```{r}
#| label: MSD664_load_poition

loading |> 
    filter(stringr::str_detect(filename, "(?i)664" ), 
           marker == "distal") |> 
    mutate(dt = time - first(time), ds = position - first(position)) |> 
    ggplot() + 
    aes(x=ds, y = load, colour = ordered(cycle), group = uid) + 
    geom_hline(yintercept = c(7, 70), linetype = "dashed", colour = "darkred") +
    geom_point() + 
    geom_line() + 
    facet_grid(plate ~ .) + 
    labs(colour = "cycle", title = "load vs position for MSD664")
    
```

It is clear that the short plate specimen is not only much stiffer than the
long plate specimen, but also quite non-linear.
This is more pronounced for this specimen than for other specimens,
although some others do show similar non-linearity, 
for both the long and short plate specimens.

The change in slope probably indicates some joints in the carpus closing under
load, which will make the construct stiffer.

Video of the tests was examined to check that there was no impingement of the
specimen on any part of the rig.
If there had been contact then the change in slope would have been much sharper.

```{r}
loading |> 
    filter(marker == "distal") |> 
    mutate(dt = time - first(time), ds = position - first(position)) |> 
    ggplot() + 
    aes(x=ds, y = load, colour = ordered(cycle), group = uid) + 
    geom_hline(yintercept = c(7, 70), linetype = "dashed") +
    geom_point() + 
    geom_line() + 
    facet_grid(plate~id) + labs(colour = "cycle")
```

Note particularly MSD575 and MSD666 long and MSD649 both short and long.

## motion data

```{r}
loading |> 
  dplyr::select(u, v, w, time, position, load, uid) |> 
  tidyr::pivot_longer(cols = c(u, v,w)) |> 
  ggplot() + 
  aes(x = value, y = load, colour = marker, group = uid) + 
  geom_point() + 
  facet_grid(name ~ id+plate)
```


## total motion

Calculate total motion for each marker.
The `u` displacement is down (-ve), as is the `v` displacement generally.
The total absolute displacement will always be positive:
$$ motion = \sqrt{u^2 + v^2 + w^2} $$

Then plot the total motion for each cycle of every test, for both markers.

The motion at the end of the "metacarpal" (`position`), is derived from the 
Instron output, but the more clinically relevant motion is at the markers.

There were two markers: `distal`, placed in the base of the metacarpal,
and `proximal` marker, placed as close as possible to the carpal bone under
the fusion plate, generally the capitate.

The rigid body of the distal radius marker has been subtracted in VIC-3D,
so any variation in the rigidity of the specimen fixation has been removed.

The total `motion` was calculated independently for each marker.

```{r}
loading <- loading |> 
  mutate(motion = sqrt(u^2 + v^2 + w^2)) 

loading |>
  ggplot() + 
  aes(x=load, y = motion, colour = marker, group = uid) + 
  geom_line() + 
  geom_smooth(method="lm", se = FALSE, colour = "darkgrey", linetype = 2, linewidth = 0.5) +
  facet_grid(id+plate~cycle) +
  labs(title = "motion vs load per cycle")
```

## analysis

To get the stiffness of each test we fit a linear model by least squares.
This is the same as the usual "line of best fit", as shown in the plot above.

A linear model was fit to the `position` data, using only the `distal`

```{r}
#| label: linear_model_fitting
# fit a linear model to each cycle
loading_models <- loading |>
  group_by(id, arm, plate, marker, cycle) |>
  summarise(
    position_model = list(
      lm(load ~ position, data = pick(everything()))
    ),
    motion_model = list(
      lm(load ~ motion, data = pick(everything()))
    )
  )

motion_models <- loading |>
  group_by(id, arm, plate, marker, cycle) |>
  summarise(
    motion_model = list(
      lm(load ~ motion, data = pick(everything()))
    )
  ) |>
  tidyr::pivot_wider(id_cols = c(id, arm, plate, cycle), 
                     names_from = marker, 
                     values_from = motion_model)

position_models <- loading |>
  filter(marker == "distal") |> # It doesn't matter which in this case
  group_by(id, arm, plate, cycle) |>
  summarise(
    position = list(
      lm(load ~ position, data = pick(everything()))
    )
  )

# Add the position column to the two markers
loading_models <- left_join(motion_models, position_models)

# Extract the slope components (estimate) of the models
stiffness <- loading_models |>
  group_by(id, arm, plate, cycle) |>
  mutate(
    across(c(distal, proximal, position), ~ purrr::map(.x, broom::tidy), .names = "{.col}_tidy")
    ) |>
  tidyr::unnest(ends_with("tidy"), names_sep = "_") |>
  filter(if_any(ends_with("term"), \(c) c != "(Intercept)")) |>
  dplyr::select(ends_with("estimate")) |>
  rename_with(~ stringr::str_remove(.x, "_tidy"))
```

## save the calculated stiffness results

Write out the calculated stifness results.
These can be read to apply different analysis, without re-calculating from the raw data.

```{r}
#| label: save_stiffness
readr::write_csv(stiffness, file = here::here("data", "cadaver_stiffness.csv"))
```


```{r}
#| label: plot_liner_model_stiffness
# Plot the stiffness per cycle as a check
stiffness |> 
  tidyr::pivot_longer(ends_with("estimate"), names_to = "location") |> 
  ggplot() + 
  aes(x=cycle, y = value, colour=plate) + 
  geom_point() + 
  facet_grid(location ~ id, scales = "free_y") +
  labs(title = "stiffness per cycle", y = "stiffness (N/mm)")
```

## check for effect of cycling

Every test was made up of 60 cycles, with two cycles recorded every 10 - so
cycles 9, 10, 19, 20, 29, 30, 39, 40, 49, 50, 50, 60.

To test if repeated cycling is having an effect use a repeated 
measures ANOVA, as the cycles are repeated on the same subject for each test.

```{r}
#| label: repeated_measures_anova

# # Do independently
# distal_effect <- stiffness |> 
#   ungroup() |> 
#   mutate(test = factor(paste0(id, plate)), cycle = factor(cycle)) |> # A factor for each test subject
#   aov(formula = distal_estimate ~ cycle + Error(test))
# broom::tidy(distal_effect) |> print()
# 
# proximal_effect <- stiffness |> 
#   ungroup() |> 
#   mutate(test = factor(paste0(id, plate)), cycle = factor(cycle)) |> # A factor for each test subject
#   aov(formula = proximal_estimate ~ cycle + Error(test))
# broom::tidy(proximal_effect) |> print()
# 
# # Explicit naming works inside summarise (across didn't seem to)
# stiffness |>
#   ungroup() |>
#   mutate(test = factor(paste0(id, plate)), cycle = factor(cycle)) |>
#   summarise(
#     distal_effect = list(aov(formula = distal_estimate ~ cycle + Error(test)) |> broom::tidy()),
#     proximal_effect = list(aov(formula = proximal_estimate ~ cycle + Error(test)) |> broom::tidy())
#   ) |>
#   tidyr::pivot_longer(cols = everything()) |>
#   tidyr::unnest(cols = value, names_sep = "_")

# Pivot longer and group to do them all together
cycle_effect <- stiffness |>
  rename_with(~ stringr::str_remove_all(.x, "_.+")) |> # don't need the complication
  ungroup() |>
  mutate(test = factor(paste0(id, plate)), cycle = factor(cycle)) |>
  tidyr::pivot_longer(cols = c(distal, proximal), names_to = "measure") |>
  group_by(measure) |>
  summarise(
    effect = list(aov(formula = value ~ cycle + Error(test)) |> broom::tidy())
  ) |> 
  tidyr::unnest(effect)

cycle_effect
```

Since all p.values are > 0.05, we can reject an effect of cycling 
(the smallest p = `r min(cycle_effect$p.value, na.rm = TRUE)`).

```{r}
# stiffness |> ungroup() |> mutate(test = factor(paste0(id, plate)), cycle = ordered(cycle)) |> tidyr::pivot_longer(cols = ends_with("estimate"), names_to = "measure") |> group_by(id, arm, plate, test, measure) |>  mutate(model = aov(formula = value ~ cycle + Error(test)))

# position_aov <- stiffness |> ungroup() |> mutate(test = factor(paste0(id, plate)), cycle = ordered(cycle)) |> aov(formula = position_estimate ~ cycle + Error(test))

# For repeats of the first plate
stiffness |> 
  ungroup() |> 
  #dplyr::select(-arm) |>
  nest_by(id, plate,marker) |>
  mutate(model = list(aov(motion ~ cycle, data = data)),
         summary = list(broom::tidy(model))
  ) |>
  tidyr::unnest(summary) |>
  dplyr::select(-data, -model) |>
  filter(!is.na(p.value))

# Across plates
stiffness |> 
  ungroup() |> 
  nest_by(plate, marker) |> 
  mutate(model = list(aov(motion ~ cycle + Error(factor(id)), data = data)),
         summary = list(broom::tidy(model))
         ) |> 
  tidyr::unnest(summary) |> 
  dplyr::select(-data, -model) |>
  filter(!is.na(p.value))

```
Only one result (proximal marker for long plates) was significant.
It is not unreasonable to can conclude that the stiffness is generally not 
changed by multiple cycles.
This means they can be averaged to reduce the variation between cycles.

Use the averaged stiffnesses in an ANOVA to look for differences due to plate type.
```{r}
#| label: compare_plates
#| warning: false
#| message: false

model <- stiffness |>
  summarise(stiffness = mean(motion), .groups = "keep") |>
  ungroup() |>
  aov(stiffness ~ plate+marker, data = _)

summary(model)
```

This shows a significant difference between the two plate designs.
The box plot shows this graphically.

```{r}
#| label: compare_plate_types
#| message: false
#| warning: false

# Compare average stiffness between plates

# This is for insertion into Matt's presentation, so want to use the font 
# Calibri, like the rest of the slides. These need to be installed previously.

extrafont::loadfonts() # makes other fonts available to R

plot_box <- loading |>
    mutate(stiffness = mean(motion)) |>
    ggplot() + 
    aes(y = motion, x = plate) +
    geom_boxplot() +
    theme_bw(base_size = 14, base_family = "Calibri") +
    facet_grid(.~marker)
    #labs(title = "plate stiffness")
print(plot_box)

ggsave(filename = here::here("data", "stiffness_between_plates.png"), 
       plot = plot_box, 
       width = 21, height = 12, units = "cm")
```

