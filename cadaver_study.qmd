---
title: "Medartis Wrist Plates"
subtitle: "Cadaver testing"
date: 2024-12-09
format: 
  html: default
  pdf: default
  docx: default
---

## setup

Load any needed libraries and define some constants.

```{r}
#| label: setup
#| warning: false
#| message: false

library(dplyr) # for manipulating dataframes
library(ggplot2) # for plotting
library(stringr) # string operations

#library(segmented) # for segmented fits

# If you don't have bluer install it with 
# install.packages("devtools")
# devtools::install_github(repo = "yadbor/bluer")
library(bluer) # routines for analysing mechanical test data

cleaned_file <- "cadaver_all_results.csv"
cycles_file <- "cadaver_cycles.csv"


# To make for easier insertion into Microsoft presentations use Calibri, 
# to match Microsoft's default font.
# The extrafont library needs to be installed previously.
extrafont::loadfonts() # makes other fonts available to R

```

## read the data files

Use the code below to read all of the .csv files output from VIC-3D.
```{r}
#| label: read_raw_files

data_root <- here::here("data-raw", "cadaver_csv_files")

raw_files = list.files(path = data_root,
                       pattern = "csv$",
                       recursive = TRUE,
                       full.names = TRUE,
                       ignore.case = TRUE
                       )
#  # Use a case insensitive match in case of (known) spelling errors
# raw_files <- raw_files |>
#   str_subset(pattern = "(?i)Marker_Data")

# Naming convention not followed in last set of extraction, 
# so loosen the acceptance criteria.
# Unfortunately some trial tests hae "marker" in the path, 
# so only test the basename, which is stored in the list names()
names(raw_files) <- basename(raw_files)
keep <- names(raw_files) |>  str_subset(pattern = "(?i)Marker")
raw_files <- raw_files[keep]

# Some tests were analysed without removing rigid motion of the radius marker,
# to check that motion reduction was working as anticipated.
# Remove these from the list of files to analyse.

raw_files <- raw_files |>
  str_subset(pattern = "(?i)MOTION|Radius", negate = TRUE)

# Name the vector with the filename, which bind_rows will turn into a column
names(raw_files) <- basename(raw_files)

# Map the function read_csv() across all elements in raw_files, then bind the resulting dataframes
# rowwise into a combined dataframe, putting the names from raw_files into a column "filename".
all_results <- raw_files |>
  purrr::map(\(f) readr::read_csv(file = f, show_col_types = FALSE)) |>
  bind_rows(.id = "filename") |>
  # clean up and simplify names
  rename(frame = "File Number", time = "Time_1") |>
  rename_with(~ str_remove(.x, "\\s*\\[.+\\]") |> str_to_lower()) |>
  dplyr::select(-"time_0") |> # Don;t need two time columns
  # fix the spelling of parts of the filename
  # First fix a known typo
  mutate(filename = str_replace(filename, "(?i)poximal", "proximal")) |>
  # Then make the marker labels all lower case
  mutate(filename = str_replace(filename, "(?i)distal", "distal")) |>
  mutate(filename = str_replace(filename, "(?i)proximal", "proximal"))
```

```{r}
#| label: parse_filenames

all_results <- all_results |>
  tidyr::separate_wider_regex(cols = filename,
                              patterns = c(id = "^[^_]+", "_", 
                                           arm = "[^_]+", "_(?i)plate\\d?", 
                                           plate = "[L|S]", "_",
                                           marker = "(?i)distal|proximal", ".*"),
                                cols_remove = FALSE,
                                #too_few = "debug"
    )

# Make nicer plate labels (but may be too long when plotting later?)
all_results <- all_results |>
  mutate(plate = case_match(plate, "L" ~ "long", "S" ~ "short"))
```

Check that the filenames have parsed to something sensible
```{r}
#| label: check_parsed

all_results |> dplyr::select(id:marker) |> purrr::map( \(c) unique(c))
```
Can then write the cleaned results out.

```{r}
#| label: write_cleaned_data
readr::write_csv(all_results, file = here::here("data", cleaned_file))
```

If using the precleaned results, load them here
```{r}
#| label: read_cleaned_data
all_results <- readr::read_csv(file = here::here("data", cleaned_file), 
                               show_col_types = FALSE)

```

## analyse cycles

Each test has multiple load-unload cycles. 
Data are recorded on the 9^th^ and 10^th^ cycles, and this is repeated 
every 10 cycles up to a total of 60 cycles.
We are interested in the loading part of each cycle.

Divide test into cycles by finding peaks and troughs, which are defined as local
maxima and minima.
The loading phase is the one going towards a peak, and the unloading phase is
towards a trough.

The `bluer` package has routines for finding peaks and labelling cycles 
and phases.

As these tests are all in compression, both the load and position 
are negative.
Invert them both so that graphs read better for most people.

```{r}
#| label: label_cycles

cycles <- all_results |> 
    # drop unused columns
  # dplyr::select(filename, all_of(data_cols)) |>
  mutate(position = -1.0 * position, load = -1.0 * load) |> # Invert these axes
  mutate(across(id:marker, factor)) |> # Convert all id columns to factors
  group_by(across(where(is.factor))) |> # group each test
  mutate(as_tibble(bluer::label_cycles(position))) |> # and label the cycles
  mutate(uid = paste0(id, arm, plate, marker, cycle)) # uniquely identify each cycle
```

The recorded data do not align exactly with each cycle, 
with some points missing at the start of the first cycle of each pair 
and some extra points at the end of the second cycle, 
which are in fact the start of the third cycle.
These errors are probably due to a delay in triggering the VIC-3D system to
turn on and off.
The extra points add a turning point, 
which `bluer` will incorrectly interpret as the start (or end) of a cycle.

Plotting just the first test shows this problem, 
but it is present to a greater or lesser extent in all the tests.

```{r}
#| label: plot_raw_labelled_cycles
cycles |> 
  ungroup() |> 
  filter(filename == first(filename)) |> 
  tidyr::pivot_longer(cols = c(position, load)) |> 
  ggplot() + 
    aes(x=time, y = value) + 
    geom_point() + 
    geom_line() + 
    facet_grid(name~., scales="free_y") +
    theme_bw(base_size = 14, base_family = "Calibri")
```

Fix this by looking for the large time gap between pairs of cycle recordings and
deleting all points in a cycle that are before that gap.

```{r}
#| label: show_extra_points_start
cycles |> 
    group_by(id, arm, plate, marker, cycle) |>
    mutate(gap = time - lag(time), 
           big_gap = gap > 2 * mean(gap, na.rm = TRUE), # gap 0 is NA as no prior
           gap_pos = max(1, which(big_gap))) |>
    distinct(gap_pos) |> 
  tidyr::pivot_wider(values_from = gap_pos, names_from = cycle) |> 
  print(n=Inf)
```
There are not many points from the previous cycle in most tests, 
except for `MSD664` cycle 12.

This test also had the load to failure test capruted in the same file, 
resulting in cycle 13, which should be discarded.

```{r}
#| label: drop_extra_points_start
# loading was already grouped by id, arm, plate, marker
# Calculate the time gap between points, 
# find gaps that are bigger than 2  the mean gap (to allow for a little jitter)
# get row of the first gap, or 1 if which() returns an empty vector (none found)
# and keep only points after that row to the end of the cycle
cycles <- cycles |> 
  group_by(id, arm, plate, marker, cycle) |>
  mutate(gap = time - lag(time), 
         big_gap = gap > 2 * mean(gap, na.rm = TRUE), # gap 0 is NA as no prior
         gap_pos = max(1, which(big_gap))) |>
  slice(max(gap_pos):n()) |> # could also use first(gap_pos), to get single value
  dplyr::select(-c(gap, big_gap, gap_pos)) |> # Clean up the temporary columns
  filter(cycle < 13) # drop the load to failure portion
```

Save the labelled data.
```{r}
#| label: write_labelled_data
readr::write_csv(cycles, file = here::here("data", cycles_file))
```

If the data files have already been cleaned up and combined, 
the preceeding code can be skipped and the processed data just 
read from `cadaver_cycles.csv` (below).

```{r}
#| label: read_labelled_data
#| eval: false # change this to read the file
cycles <- readr::read_csv(file = here::here("data", cycles_file),
                               show_col_types = FALSE)
# Remake thr grouping information
cycles <- cycles |>
  mutate(across(id:marker, factor)) |> # Convert all id columns to factors
  group_by(across(where(is.factor)), cycle)
```

## check data integrity

Check that the markers are correctly labelled.
The test geometry always puts the proximal marker to the right, 
so the proximal X coordinate will be greater than the distal X coordinate.

```{r}
#| label: check_marker_positions
#| message: FALSE
cycles |> 
  filter(cycle == 1) |> # X, Y, Z are determined by the first frame
  summarise(x = first(x)) |> # just the first row of each
  tidyr::pivot_wider(names_from = marker, values_from = x) |> 
  mutate(proximal_right = proximal > distal)
```

Plot all of the loading segments to visually check they look sensible.
This will be easier to interpret if if all of the cycles are aligned to start 
at time = 0.

```{r}
#| label: check_loading_shapes
#| warning: false

# Take just the loading segment as it is more linear and controlled.
loading <- cycles |> 
    filter(seg == "load")

# The applied load will be the same for either marker, so pick either one.
loading |>
    filter(marker == 'distal') |> 
    mutate(dt = time - first(time)) |> 
    ggplot() + 
      aes(y=load, x = dt, colour = ordered(cycle), group = uid) + 
      #scale_color_brewer(palette = "Set1") +
      geom_point() + 
      geom_hline(yintercept = c(7, 70), linetype = "dashed", colour = "darkred") +
      geom_line(linewidth = 0.5) + 
      facet_grid(id~plate) + 
      theme(strip.text.y = element_text(angle = 0)) +
      labs(title = "load x time", colour = "cycle") +
      theme_bw(base_size = 14, base_family = "Calibri")

```

The peak load is quite uniform for each cycle, 
but the data do not always show a return to the same mimimum load.

Some of this will be the error in recording the start of each cycle.
This missing data has no effect on the stiffness calculations.

## missing data

There are no results for the `MSD601` or `MSD648` short plate tests, 
as the test failed.
Also, `MSD601` only had 3 cycles in the long plate test.
Drop these specimens as there are not comparable short plate results.

```{r}
#| label: drop_bad_tests

loading <- loading |>
  filter(id != "MSD601", id != "MSD648")
```

## check test speed

The short plate test for MSD664 appears to have run twice as fast as the 
long plate test, which needs more analysis.

The Instron was programmed to move at a constant speed, 
reversing when the measured load reached 70N, 
then moving back up until the load dropped to 7N.
This was repeated for every cycle.

Speed is `position / time`, which is the slope of the position vs time curve.
Plot the relative position and time for each cycle, to make the trends easier to see.

```{r}
#| label: check_MSD664
loading |> 
  filter(str_detect(filename, "(?i)664" ), 
         marker == "distal", time < 800) |> 
  mutate(dt = time - first(time), ds = position - first(position)) |> 
  ggplot() + 
  aes(y=ds, x = dt, colour = cycle, group = uid) + 
  geom_point() + 
  geom_line() + 
  facet_grid(filename~.) +
  theme_bw(base_size = 14, base_family = "Calibri")
```

Check that all tests did in fact have the same speed.

```{r}
#| label: check_speeds
#| message: false

# Fit a straight line to position ~ time for each test, then extract the slopes
speeds <- loading |>
  group_by(id, arm, plate, marker, cycle) |>
  summarise(
        model = list(lm(position ~ time, data = pick(everything())))
    ) |> 
  mutate(params = purrr::map(model, broom::tidy)) |> 
  tidyr::unnest(params) |> 
  filter(term != "(Intercept)") |> 
  dplyr::select(estimate)

# Summarise the speeds
numbers <- summary(speeds$estimate)
cat("The measured test speeds across ", nrow(speeds), "cycles varied thus:\n")
numbers

percent_spread <- 100 * (last(numbers) - first(numbers)) / numbers["Mean"] |> unname()
cat("\nThis is a total variation of about", round(percent_spread, 1), "%")
```

This is a total variation of about `r round(percent_spread, 1)`, 
which is not very much, conidering the variation in recording as these data come
from the VIC-3D, not directly from the Instron.

What about the shape of the load ~ position curve?
```{r}
#| label: MSD664_load_poition

loading |> 
    filter(str_detect(filename, "(?i)664" ), 
           marker == "distal") |> 
    mutate(dt = time - first(time), ds = position - first(position)) |> 
    ggplot() + 
    aes(x=ds, y = load, colour = ordered(cycle), group = uid) + 
    geom_hline(yintercept = c(7, 70), linetype = "dashed", colour = "darkred") +
    geom_point() + 
    geom_line() + 
    facet_grid(plate ~ .) + 
    labs(colour = "cycle", title = "load vs position for MSD664") +
    theme_bw(base_size = 14, base_family = "Calibri")
    
```

It is clear that the short plate specimen is not only much stiffer than the
long plate specimen, but also quite non-linear.
This is more pronounced for this specimen than for other specimens,
although some other specimens do show similar non-linearity, 
for both the long and short plate specimens.

The change in slope probably indicates some joints in the carpus closing under
load, which will make the construct stiffer.

Video of the tests was examined to check that there was no impingement of the
specimen on any part of the rig.
If there had been contact then the change in slope would have been much sharper.

```{r}
#| label: plot_aligned_data
#| 
loading |> 
    filter(marker == "distal") |> 
    mutate(dt = time - first(time), ds = position - first(position)) |> 
    ggplot() + 
    aes(x=ds, y = load, colour = ordered(cycle), group = uid) + 
    geom_hline(yintercept = c(7, 70), linetype = "dashed") +
    geom_point() + 
    geom_line() + 
    facet_grid(plate~id) + labs(colour = "cycle") +
    theme_bw(base_size = 14, base_family = "Calibri")
```

Note particularly MSD575 and MSD666 long and MSD649 both short and long.

## motion data

The motion at the end of the "metacarpal" (`position`), is derived from the 
Instron output, but the more clinically relevant motion is at the markers.

There were two markers: `distal`, placed in the base of the metacarpal,
and `proximal` marker, placed as close as possible to the carpal bone under
the fusion plate, generally the capitate.

The rigid body of the marker on the distal radius was subtracted in VIC-3D,
so any variation in the rigidity of the specimen fixation has been removed.

The motion of the proximal marker therefore represents the motion of the
intermediate carpal bone in the fixation (usually the capitate), 
while the distal marker tracks the motion of the middle metacarpal relative to
the radius.

To get the motion of the metacarpal realtive to the carpal, which is the motion
at the distal bone to bone fusion site, subtract the motion of the proximal 
marker from the distal marker for each axis.
```{r}
#| label: calulate_relative_motion
#| message: false
#| 
# To subtract one marker from another, first get them into seperate columns,
# then do the subtraction, then put them back into one column x their components.
# 
# Take a dataframe with columns (... marker, u, v, w)
# pivot to (... marker, axis, value), then back to (axis, distal, proximal)
# Subtract proximal from distal, then pivot to (... marker, axis, value) 
# and finally pivot back to (... marker, u, v, w)
rel_motion <- loading |> 
  select(u:w, time,load,position) |> 
  tidyr::pivot_longer(cols = u:w, names_to = "axis") |> 
  tidyr::pivot_wider(names_from = marker) |> 
  mutate(abs_distal = distal, distal = distal - proximal) |> 
  tidyr::pivot_longer(c(abs_distal, proximal, distal), names_to = "marker") |> 
  tidyr::pivot_wider(names_from = axis) |> 
  group_by(marker, .add = TRUE) # put back the group lost during the pivots

```

## total motion

Calculate total motion for each marker.
The `u` displacement is down (-ve), as is the `v` displacement generally.
The total absolute displacement will always be positive:
$$ motion = \sqrt{u^2 + v^2 + w^2} $$
```{r}
#| label: calculate_total_motion

# Make all motion relative to the start of each cycle, 
# to avoid issues when adding to get total relative motion.
rel_motion <- rel_motion |>
  mutate(u = u - first(u), v = v - first(v), w = w - first(w)) |>
  mutate(motion = sqrt(u^2 + v^2 + w^2)) # then sum the components

```

Now recombine the total motion for each marker with the load and position data
from the Instron.

```{r}
#| label: recombine_data
#| message: false

# Just the combined motion, into one column per marker, so one row per frame.
motion_only <- rel_motion |> 
  select(-(u:w)) |> 
  tidyr::pivot_wider(values_from = motion, names_from = marker) 

# Only want one Instron row for each marker row (had two markers & now have 3)
instron_only <- loading |> 
  ungroup() |> 
  distinct(id, arm, plate, cycle, frame, time, position, load)

# Joint he two data frames by their common columns
motion <- left_join(instron_only, motion_only)

```

Then plot the total _relative_ motion for each cycle of every test, 
for both markers.

```{r}
#| label: plot_motion_per_cycle
#| message: false

# Rearrange to make plotting easier first
all_data_plot <- motion |> 
  tidyr::pivot_longer(
    cols = c(abs_distal, distal, proximal),
    values_to = "motion",
    names_to = "marker"
  ) |> 
  filter(marker != "abs_distal") |> 
  ggplot() + 
  aes(x = load, y = motion, colour = marker, 
      group = paste0(id, plate, cycle, marker) # one group for each line to draw
      ) + 
  geom_point(size = 0.5, alpha = 0.5) + geom_line(linewidth = 0.25) + 
  geom_smooth(method="lm", se = FALSE, colour = "darkgrey", linetype = 2, linewidth = 0.5) +
  facet_grid(rows = vars(id, plate), cols = vars(cycle)) + 
  theme(strip.text.y = element_text(angle = 0)) + 
#  theme_bw(base_size = 10, base_family = "Calibri") +
  labs(title = "motion vs load per cycle")

ggsave(here::here("data", "all_data_together.png"), 
       all_data_plot, 
       width = 21, height = 12, units = "cm")
all_data_plot
```

## analysis

To get the stiffness of each test, fit a linear model by least squares.
This is the same as the usual "line of best fit", as seen in the plot above.

A linear model was fit to the `position` data, using only the first marker rows,
as this result is the same for both position groups.

```{r}
#| label: linear_model_fitting
#| message: false
# fit a linear model to each cycle of data,
# one for each marker
motion_models <- rel_motion |> 
    summarise(
        motion_model = list(
            lm(load ~ motion, data = pick(everything()))
        )
    ) |>
    tidyr::pivot_wider(id_cols = c(id, arm, plate, cycle), 
                       names_from = marker, 
                       values_from = motion_model)

# and one for the Instron position
position_models <- rel_motion |> 
  ungroup(marker) |> # Remove marker from the grouping columns
  filter(marker == first(marker)) |>  # it doesn't matter which on in this case
  summarise(
    position = list(
      lm(load ~ position, data = pick(everything()))
    )
  )

# Add the position column to the two markers
loading_models <- left_join(motion_models, position_models)

# Extract the slope components (estimate) of the models
stiffness <- loading_models |>
  group_by(id, arm, plate, cycle) |>
  mutate(
    across(c(distal, proximal, position), ~ purrr::map(.x, broom::tidy), .names = "{.col}_tidy")
    ) |>
  tidyr::unnest(ends_with("tidy"), names_sep = "_") |>
  filter(if_any(ends_with("term"), \(c) c != "(Intercept)")) |>
  dplyr::select(ends_with("estimate")) |>
  rename_with(~ str_remove(.x, "_tidy"))
```

## save the calculated stiffness results

Write out the calculated stiffness results.
These can be read to apply different analysis, 
without re-calculating from the raw data.

```{r}
#| label: save_stiffness
readr::write_csv(stiffness, file = here::here("data", "cadaver_stiffness.csv"))
```


```{r}
#| label: plot_liner_model_stiffness
# Plot the stiffness per cycle as a check
stiffness |> 
  tidyr::pivot_longer(ends_with("estimate"), names_to = "location") |> 
  ggplot() + 
  aes(x=cycle, y = value, colour=plate) + 
  geom_point() + 
  facet_grid(location ~ id, scales = "free_y") +
  theme_bw(base_size = 14, base_family = "Calibri") +
  labs(title = "stiffness per cycle", y = "stiffness (N/mm)")
```

This can be summarised with a box plot.
```{r}
#| label: boxplot_liner_model_stiffness
# Plot the stiffness per cycle as a check
stiffness |> 
  tidyr::pivot_longer(ends_with("estimate"), names_to = "location") |> 
      mutate(location = ordered(str_remove(location, "_estimate"), 
                                levels = c("proximal", "distal", "position")
                                )
             ) |>
  ggplot() + 
  aes(x=plate, y = value, colour=plate) + 
  geom_boxplot() + 
  facet_grid(location ~ id, scales = "free_y") +
  theme_bw(base_size = 14, base_family = "Calibri") +
  labs(title = "stiffness per cycle", y = "stiffness (N/mm)")

```
The plots make it plain that some specimens are stiffer than others,
and it is usually, but not always, the short plate which is stiffer.

## check for effect of cycling

Every test was made up of 60 cycles, with two cycles recorded every 10 - so
cycles 9, 10, 19, 20, 29, 30, 39, 40, 49, 50, 50, 60.

The repeated cycling may have an effect on the stiffness (e.g. by loosening
the screws), so check for that.

To test if repeated cycling is having an effect use a repeated 
measures ANOVA, as the cycles are repeated on the same subject for each test.

```{r}
#| label: repeated_measures_anova

# Pivot longer and group to do them all together
cycle_effect <- stiffness |>
  rename_with(~ str_remove_all(.x, "_.+")) |> # don't need the complication
  ungroup() |>
  mutate(test = factor(paste0(id, plate)), cycle = factor(cycle)) |>
  tidyr::pivot_longer(cols = c(distal, proximal), names_to = "measure") |>
  group_by(measure) |>
  summarise(
    effect = list(aov(formula = value ~ cycle + Error(test)) |> broom::tidy())
  ) |> 
  tidyr::unnest(effect)

cycle_effect
```

Since all p.values are > 0.05, we can reject an effect of cycling on stiffness.
(the smallest p is `r min(cycle_effect$p.value, na.rm = TRUE)`).

Given that, the cycles can be considered together to reduce the variability.

```{r}
#| label: stiffness_all_cycles
#| message: false

motion_all_cycles <- rel_motion |> 
    ungroup(cycle) |>
    summarise(
        motion_model = list(
            lm(load ~ motion, data = pick(everything()))
        )
    ) |>
    tidyr::pivot_wider(id_cols = c(id, arm, plate), 
                       names_from = marker, 
                       values_from = motion_model)

position_all_cycles <- rel_motion |> 
  ungroup(marker) |> # Remove marker from the grouping columns
  filter(marker == first(marker)) |>  # it doesn't matter which on in this case
  ungroup(cycle) |>
  summarise(
    position = list(
      lm(load ~ position, data = pick(everything()))
    )
  )

stiffness_all_cycles <- left_join(motion_all_cycles, position_all_cycles) |>
  group_by(id, plate) |>
  mutate(
    across(c(distal, proximal, position), ~ purrr::map(.x, broom::tidy), .names = "{.col}_tidy")
    ) |>
  tidyr::unnest(ends_with("tidy"), names_sep = "_") |>
  filter(if_any(ends_with("term"), \(c) c != "(Intercept)")) |>
  dplyr::select(ends_with("estimate")) |>
  rename_with(~ str_remove(.x, "_tidy"))

# Rearrange the result data into long form
results <- stiffness_all_cycles |>
  rename_with(~ str_remove(.x, "_estimate")) |>
  ungroup() |>
  tidyr::pivot_longer(cols = distal:position, names_to = "location") |>
  mutate(location = ordered(location, levels = c("proximal", "distal", "position"))) |>
  mutate(plate = forcats::fct_recode(plate, long = "L", short = "S"))

# Plot to show the averaged stiffness results per plate & arm
results |> ggplot() + 
    aes(x=plate, y = value, colour=plate) + 
    geom_boxplot() + 
    facet_grid(location ~ id, scales = "free_y") +
    theme_bw(base_size = 14, base_family = "Calibri") +
    labs(title = "stiffness per cycle", y = "stiffness (N/mm)")
```

The results are very similar when taking all cycles together.
At the proximal and distal fusion sites the short plate is stiffer 
than the long plate for _most_ tests, but not all.

The long plate is stiffer overall (i.e. measured at the loading point), 
again for _most_ but not all specimens.

```{r}
#| label: which_is_stiffer

results |> 
  tidyr::pivot_wider(values_from = value, names_from = plate) |>
  group_by(location) |> 
  mutate(stiffer = if_else(long > short, "long stiffer", "short stiffer")) |> 
  count(stiffer) |> 
  tidyr::pivot_wider(names_from = stiffer, values_from = n)
```

## compare plate types

Test if the plate type significantly effects the stiffness, using a paired
t-test as the arms were paired.
This is the strongest statistical test for these data.
Check each marker separately, in case there is an effect at one location
but not at others.

```{r}
#| label: paired_t-test
#| 
# Using a "paired" ANOVA
anova_results <- results |> 
  nest_by(location) |>
  mutate(model = list(aov(formula = value ~ plate, data = data)), 
         summary = list(broom::tidy(model))
         ) |> 
  tidyr::unnest(summary) |>
  select(-data, -model)

anova_paired <- results |> 
  nest_by(location) |>
  mutate(model = list(aov(formula = value ~ plate + Error(id/plate), data = data)), 
         summary = list(broom::tidy(model))
         ) |> 
  tidyr::unnest(summary) |>
  select(-data, -model)

t_results <- results |> 
    nest_by(location) |>
    mutate(model = list(t.test(formula = value ~ plate, data = data)), 
           summary = list(broom::tidy(model))
    ) |> 
    tidyr::unnest(summary) |>
    select(-data, -model)

# But should be a paired t-test...
# The formula interface to t.test() doesn't work with paired = TRUE, 
# and it's easier to use pairwise.t.test() anyway...
t_results <- results |> 
    nest_by(location) |>
    mutate(model = list(pairwise.t.test(x = data$value, g = data$plate, paired = TRUE)), 
           summary = list(broom::tidy(model))
    ) |> 
    tidyr::unnest(summary) |>
    select(-data, -model)

```
None of the tests are significant, as all `p.value`s are > 0.05.

That is, the plate type does not have a significant effect on the stiffness
at either of the fusion sites (proximal & distal), 
or on the overall fusion (position).

The box plot shows this graphically.

```{r}
#| label: compare_plate_types
#| message: false
#| warning: false

# Compare average stiffness between plates

plot_box <- results |>
  ggplot() + 
  aes(x = plate, y = value, colour = plate) + 
  geom_boxplot() + 
  facet_grid(cols = vars(location)) +
  theme_bw(base_size = 14, base_family = "Calibri") +
  labs(title = "plate stiffness by location", y = "stiffness (N/mm)") +
  guides(colour = "none")
print(plot_box)

ggsave(filename = here::here("data", "stiffness_between_plates.png"), 
       plot = plot_box, 
       width = 21, height = 12, units = "cm")
```

At the proximal junction the short plates were stiffer than the long plates, 
although the difference was not significant, due to the large variation in the
short plate stiffness at this junction.

At the distal junction the long plates were slightly stiffer, but this was still
not significant, even with the smaller variation of the short plates.

The overall stiffness as measured from the testing machine was much less 
variable for both plates, and the short plate was slightly stiffer than.
The difference was very small, so not significant even with the 
reduced variability.

Check if the study had adequate power.

```{r}
#| label: power_t-test
# Power os a paired t.test
results |>
  mutate(location = ordered(location, levels = c("proximal", "distal", "position"))) |>
  pivot_wider(names_from = plate, values_from = value) |>
  nest(.by = location) |>
  mutate(t_test = map(data, ~ {
    delta = .x$short - .x$long;
    power.t.test(
      delta = mean(delta),
      sd = sd(delta),
      sig.level = 0.05,
      power = 0.8,
      type = "paired",
      alternative = "two.sided"
    )
  } |> broom::tidy())) |>
  unnest(t_test) |>
  arrange(location)
```

Given the large number of specimens required to demonstrate statistical 
significance for the observed diffence between the plates it would be 
reasonable to conclude that inter-specimen (or patient) differences are greater 
than any inherent difference between plates.

This is not surprising, as for some tests the short plate was stiffer while for
other tests the long plate was stiffer.

## equivalence testing

Having established that the plates are not different, are they the same?
This was examined with equivalence testing, using a two-one-sided-t-test (TOST).
The TOST procedure effectively tests if the mean is significantly larger than a
specified lower bound, and simultaneously significantly smaller than a specified 
upper bound.
If both statements are true then we can be confident that the actual value is 
between the specified bounds.

```{r}
#| label: TOST_setup

# Arbitrarily choose 10% of the group mean value as the smallest effect size of interest (SESOI)
eqb_percent = (10 / 100)
# As the means differ by location, find 10% of each & make a list by location
eqb_list <- results |> 
    summarise(eqb = mean(value) * eqb_percent, .by = location) |> 
  tibble::deframe()

eqb_print = scales::label_percent()(eqb_percent) # format for display

```

Test if the two plates differed by less than ± `r eqb_print`. 

```{r}
#| label: TOST_testing

library(TOSTER)

# Choices for formatting the output of TOST
tidy_tost <- function(tost) {
    as_tibble(tost$TOST, rownames = "test")
}
tidy_tost_p <- function(tost) {
  as_tibble(tost$TOST, rownames = "test") |>
    select(-t, -SE, -df) |>
    tidyr::pivot_wider(values_from = p.value, names_from = test)
}

# Apply a different equivalecnce bound per position.
results |> 
  group_by(location) |> 
  group_modify(
   ~ TOSTER::t_TOST(value ~ plate, data = .x, hypothesis = "EQU", paired = TRUE, eqb = eqb_list[.y$location]) |> 
      tidy_tost_p()
  ) |> bind_cols(equivalence_bounds = eqb_list)

```

None of the tests achieved significance, as both the upper and lower test must
be significant to determine that the difference is between the bounds.
Therefore we cannot conclude that the difference between plates is less than the
chosen ± `r eqb_print`.

Given the large variation in the results, it is likely that many specimens 
would be needed to make a determination of equivalence.
A _post-hoc_ power test shows this to be the case.

```{r}
#| label: power_TOST
# power_t_TOST(
#   n = NULL,
#   delta = 0,
#   sd = 1,
#   eqb,
#   low_eqbound = NULL,
#   high_eqbound = NULL,
#   alpha = NULL,
#   power = NULL,
#   type = "two.sample"
# )

# Set up a table of parameters per location to feed to power_t_TOST
# First get tthe paired data into parallel columns, then extract the parameters
params <- results |> 
  tidyr::pivot_wider(names_from = plate) |> 
  group_by(location) |> 
  summarise(
    n = n(),
    delta = 0, 
    sd = sd(long - short), # Standard deviation of the differences for paired samples.
    eqb = eqb_list[cur_group()$location], # Chosen previously
    alpha = .05, 
    power = 0.8,
    type = "paired",
      
    .groups = "keep"
  )

params |> 
    group_modify(~ TOSTER::power_t_TOST(delta = 0, 
                                     sd = .x$sd, 
                                     eqb = .x$eqb, 
                                     alpha = .x$alpha, 
                                     power = .x$power, 
                                     type = .x$type) |> broom::tidy()
    ) 
# n	
# number of observations per group. 2 sample sizes, in a vector, can be provided for the two sample case.
# 
# delta	
# true difference in means (default is 0).
# 
# sd	
# population standard deviation. Standard deviation of the differences for paired samples.
# 
# eqb	
# Equivalence bound. Can provide 1 value (negative value is taken as the lower bound) or 2 specific values that represent the upper and lower equivalence bounds.
# 
# low_eqbound	
# Lower equivalence bounds. Deprecated use eqb.
# 
# high_eqbound	
# Upper equivalence bounds. Deprecated use eqb.
# 
# alpha	
# a priori alpha-level (i.e., significance level).
# 
# power	
# power of the TOST procedure (1-beta).
# 
# type	
# string specifying the type of t-test.
```

Given the large number of specimens required to demonstrate that the plates 
were less than ± `r eqb_print` different it is reasonable to conclude that 
inter-specimen (or patient) differences are greater than any inherent difference 
between plates.